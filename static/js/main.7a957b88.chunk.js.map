{"version":3,"sources":["App.jsx","reportWebVitals.js","index.js"],"names":["App","props","state","data","item","weather","temperature","temperature_max","temperature_min","icon","humidity","speed","placeName","apiToken","id","a","getJSON","uri","options","window","fetch","then","res","json","description","main","temp","temp_max","temp_min","wind","method","params","this","setState","event","index","target","dataset","optionIndex","place","getData","name","console","log","Card","class","CardActions","handleUpdate","bind","CardContent","React","Component","SelectorView","Autocomplete","getOptionLabel","option","renderInput","TextField","label","variant","style","width","fullWidth","onChange","ListView","formatTemperature","formatTemperature_max","formatTemperature_min","formatHumidity","formatSpeed","List","ListItem","ListItemText","primary","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7a957b88.chunk.js","sourcesContent":["import React from 'react'\nimport './App.css'\nimport {\n  Card,\n  CardContent,\n  CardActions,\n  List,\n  ListItem,\n  ListItemText,\n  TextField,\n  Avatar,\n} from '@material-ui/core'\nimport Autocomplete from '@material-ui/lab/Autocomplete'\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      data: {},\n      item: {\n        weather: '',\n        temperature: '',\n        temperature_max: '',\n        temperature_min: '',\n        icon: '',\n        humidity: '',\n        speed: ''\n      },\n      placeName: ''\n    }\n    this.apiToken = 'afd7f94fa1e81f71e4c493ad127a743e'\n  }\n\n  async getData (id) {\n    const getJSON = (uri, options) =>\n      window\n        .fetch(uri, options)\n        .then(res => res.json())\n        .then(json => ({\n          weather: json.weather[0].description,\n          temperature: json.main.temp,\n          temperature_max: json.main.temp_max,\n          temperature_min: json.main.temp_min,\n          humidity: json.main.humidity,\n          speed: json.wind.speed\n        }))\n\n    const options = { method: 'get' }\n    const uri =\n      'https://api.openweathermap.org/data/2.5/weather?lang=ja&units=metric'\n    const params = `&appid=${this.apiToken}&id=${id}`\n    const data = await getJSON(uri + params, options)\n    this.setState({ item: data })\n  }\n\n  handleUpdate (event) {\n    const index = event.target.dataset.optionIndex\n    const place = this.state.data[index]\n    this.getData(place.id)\n    this.setState({ placeName: place.name })\n  }\n\n  componentDidMount () {\n    this.setState({\n      data: [\n        { name: '沖縄', id: 1854345 },\n        { name: '東京', id: 1850147 }, \n        { name: '上海', id: 1796236 },\n        { name: 'ニューヨーク', id: 5128581 },\n        { name: 'カイロ', id: 360630 },\n        { name: 'パリ', id: 2988507 },\n        { name: 'ブラジリア', id: 3469058 },\n        { name: 'サンフランシスコ', id: 3837675 },\n        { name: 'ロサンゼルス', id: 5368361 },\n        { name: 'カリフォルニアシティ', id: 5332748 },\n        { name: 'ベルリン', id: 2950159 },\n        { name: 'バルセロナ', id: 3128760 },\n        { name: 'リオデジャネイロ', id: 3451190 },\n        { name: 'サンパウロ', id: 3448439 },\n        { name: 'サンティアゴ', id: 3871336 },\n        { name: 'バンクーバー', id: 6173331 },\n        { name: 'ヒューストン', id: 4699066 },\n        { name: 'シアトル', id: 5809844 },\n        { name: 'カンザスシティ', id: 4393217 },\n        { name: 'シカゴ', id: 4887398 },\n        { name: 'コロンビア', id: 4381982 },\n        { name: 'リンカーン', id: 5072006 },\n        { name: 'ストックホルム', id: 2673730 },\n        { name: 'ロンドン', id: 2643741 }\n      ]\n    })\n  }\n\n  render () {\n    console.log(this.state)\n    return (\n      <Card>\n        <div class='Card'>\n        </div>\n        <CardActions>\n          <SelectorView\n            data={this.state.data}\n            handleUpdate={this.handleUpdate.bind(this)}\n          />\n        </CardActions>\n        <CardContent>\n          <ListView item={this.state.item} />\n        </CardContent>\n      </Card>\n    )\n  }\n}\n\nconst SelectorView = props => (\n  <Autocomplete\n    options={props.data}\n    getOptionLabel={option => option.name}\n    renderInput={params => (\n      <TextField\n        {...params}\n        label='選択'\n        variant='outlined'\n        style={{ width: 400 }}\n        fullWidth\n      />\n    )}\n    onChange={props.handleUpdate}\n  />\n)\n\nconst ListView = props => {\n  const {\n    weather,\n    temperature,\n    temperature_max,\n    temperature_min,\n    humidity,\n    speed\n  } = props.item\n  const formatTemperature = temperature ? `${temperature}℃` : ''\n  const formatTemperature_max = temperature_max ? `${temperature_max}℃` : ''\n  const formatTemperature_min = temperature_min ? `${temperature_min}℃` : ''\n  const formatHumidity = humidity ? `${humidity}%` : ''\n  const formatSpeed = speed ? `${speed}m/s` : ''\n  console.log('props', props)\n  return (\n    <List>\n      <div class='data'>\n        <ListItem>\n          <ListItemText primary={weather} />\n          天気\n        </ListItem>\n        <ListItem>\n          <ListItemText primary={formatTemperature} />\n          気温\n        </ListItem>\n        <ListItem>\n          <ListItemText primary={formatTemperature_max} />\n          最高気温\n        </ListItem>\n        <ListItem>\n          <ListItemText primary={formatTemperature_min} />\n          最低気温\n        </ListItem>\n        <ListItem>\n          <ListItemText primary={formatHumidity} />\n          湿度\n        </ListItem>\n        <ListItem>\n          <ListItemText primary={formatSpeed} />\n          風速\n        </ListItem>\n      </div>\n    </List>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}